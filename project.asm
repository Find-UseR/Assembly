.MODEL SMALL
.DATA
    MATRIX      DB 80*25 DUP(?),'$' ;25 LINES OF 80 CHARS EACH 
    MATRIX_2    DB 22 DUP(?)        ;   
    ROW         DB 2                ;FOR NAVIGATING COLUMNS/CHARACTER CELLS WITH ARROW KEYS
    COLUMN      DB 0                ;FOR NAVIGATING ROWS/LINES WITH ARROW KEYS
    CURR_LINE   DB 2                ;ROWS/LINES WHILE EDITING
    CURR_CHAR   DB 0                ;COLUMNS/CHARS WHILE EDITING
    ;FOR MAIN MENU
    DECO1       DB '  =================================================$'
    DECO2       DB '||            COMMAND LINE TEXT EDITOR             ||$'
    DECO3       DB '||                                                 ||$'
    DECO4       DB '||         ESC = EXIT || CTRL+S = SAVE FILE        ||$'
    DECO5       DB '||              ARROW KEYS = NAVIGATE              ||$'
    DECO6       DB '  =================================================$'
    DOCPROMPT   DB 'ENTER DOCUMENT NAME (.TXT): $'
    DOCNAME     DW 50 DUP(?),'$'
    OPENPROMPT  DB 'ENTER DOCUMENT NAME TO OPEN: $'
    HANDLE      DW ? 
    HEADER      DB 80 DUP('='),'$'    
    COLOR       DB 3*15+15
    
          
.CODE 

;=========== MACROS ===========
NEWLINE MACRO
    MOV DL, 10       ;NEWLINE ASCII
    MOV AH, 2
    INT 21H   
    MOV DL, 13       ;LINEFEED (RETURN) ASCII
    MOV AH, 2
    INT 21H
ENDM
REMOVE MACRO
    MOV DX, 8        ;BACKSPACE TO GO BACK ONE CHAR
    MOV AH, 2
    INT 21H
    MOV DX, 32       ;SPACE TO REMOVE THAT CHAR
    MOV AH, 2
    INT 21H
    MOV DX, 8        ;BACKSPACE TO GO BACK AT REMOVED CHAR POSITION
    MOV AH, 2
    INT 21H
ENDM
GOTO_POS MACRO ROW, COL
    MOV AH, 02H      ;SET TEXT POSITION IN MIDDLE SCREEN
    MOV DH, ROW
    MOV DL, COL
    INT 10H
ENDM
CLRSCRN MACRO
    MOV AH, 02H    ;SET CURSOR TO UPPER LEFT CORNER
    MOV DH, 0
    MOV DL, 0
    INT 10H            
    MOV AH, 0AH    ;OVERWRITE WITH BLANK CHARS & REMOVE ALL CHARS
    MOV AL, 00H    ;CHARACTER
    MOV CX, 2000  ;HOW MANY TIMES TO WRITE
    INT 10H        ;GRAPHICS INTERRUPT
ENDM 
DEBUG MACRO ARG
    MOV DX, ARG    ;FOR DEBUGGING PURPOSE
    MOV AH, 2
    INT 21H
ENDM

;=============== PROCEDURES ===============
START_MENU PROC
    ;DISPLAY MAIN MENU
    GOTO_POS 5, 12
    MOV DX, OFFSET DECO1      ;DECORATION 1
    MOV AH, 9
    INT 21H
    GOTO_POS 6, 12
    MOV DX, OFFSET DECO2      ;DECORATION 2
    MOV AH, 9
    INT 21H
    GOTO_POS 7, 12
    MOV DX, OFFSET DECO3      ;DECORATION 3
    MOV AH, 9
    INT 21H
    GOTO_POS 8, 12
    MOV DX, OFFSET DECO4      ;DECORATION 4
    MOV AH, 9
    INT 21H
    GOTO_POS 9, 12
    MOV DX, OFFSET DECO5      ;DECORATION 5
    MOV AH, 9
    INT 21H
    GOTO_POS 10, 12
    MOV DX, OFFSET DECO6      ;DECORATION 6
    MOV AH, 9
    INT 21H
    GOTO_POS 13, 12
    MOV DX, OFFSET DOCPROMPT  ;PROMPT DOC NAME FIELD
    MOV AH, 9
    INT 21H
    
    ;INPUT CHARS IN DOC NAME FIELD 
    MOV CX, 0  ;ARRAY SIZE COUNTER
    MOV SI, OFFSET DOCNAME
    INPUT_CHAR: 
    MOV AH, 1
    INT 21H
    CMP AL, 13          ;CHECK IF RETURN KEY HIT
    JE RETURN
    CMP AL, 8           ;CHECK IF BACKSPACE KEY HIT
    JE REMOVE_CHAR
    INC CX              ;INCREMENT ARRAY SIZE BY 1
    MOV [SI], AL
    INC SI
    JMP INPUT_CHAR
    
    REMOVE_CHAR:
    CMP CX, 0
    JE SETPOS_RET
    DEC CX              ;DECREMENT ARRAY SIZE BY 1
    DEC SI
    MOV [SI], 00H
    
    MOV DL, 32          ;FOR REMOVING CHAR
    MOV AH, 2           ;
    INT 21H             ;
    MOV DL, 8           ;
    MOV AH, 2           ;
    INT 21H             ;
    JMP INPUT_CHAR
    
    SETPOS_RET:
    GOTO_POS 13, 40
    JMP INPUT_CHAR 
    
    RETURN:    ;CLEAR THE SCREEN AND RETURN PROCEDURE
    RET 
START_MENU ENDP

UPPER_BAR PROC
    GOTO_POS 0 0
    MOV DX, OFFSET DOCNAME  ;DISPLAY DOCNAME ON UPPER CORNER
    MOV AH, 9
    INT 21H
    GOTO_POS 1 0
    MOV DX, OFFSET HEADER
    MOV AH, 9
    INT 21H
    
    RET            
UPPER_BAR ENDP

;=============== MAIN ===============
MAIN PROC
    MOV AX, @DATA
    MOV DS, AX 
    
    MOV AH, 01H        ;DEFINE TEXT CURSOR SHAPE
    MOV CX, 07H        ;
    INT 10H            ; 
    CLRSCRN
    CALL START_MENU    ;CALL START MENU 
    CLRSCRN            ;CLEAR SCREEN MACRO
    CALL UPPER_BAR     ;CALL UPPER STATS BAR IN EDITOR UI
    
    GOTO_POS 2, 0      ;SET CURSOR POSITION BENEATH UPPER BAR
    
    MOV SI, OFFSET MATRIX 
    MOV DI, OFFSET MATRIX_2
    MAIN_LOOP:                                   
    ; GET KEYSTROKE
    MOV AH, 00H
    INT 16H
    ; AH = BIOS SCAN CODE
    CMP AH, 01H            ;IF ESCAPE KEY
    JE EXIT
    CMP AL, 13H            ;IF CTRL+S
    JE SAVE
    CMP AL, 0FH            ;IF CTRL+O
    JE OPEN
    CMP AH, 48H            ;IF UP ARROW
    JE UP
    CMP AH, 50H            ;IF DOWN ARROW
    JE DOWN
    CMP AH, 4BH            ;IF LEFT ARROW
    JE LEFT
    CMP AH, 4DH            ;IF RIGHT ARROW
    JE RIGHT                             
    CMP AH, 1CH            ;IF ENTER (NEWLINE) KEY
    JE ENTER                                    
    CMP AH, 0EH            ;IF BACKSPACE (REMOVE CHARACTER)
    JE BACKSPACE       
    
    CMP COLUMN, 79
    JE ENTER
    MOV DL, AL             ;IF ANY OTHER KEY THEN WRITE CHAR ON SCREEN
    MOV AH, 2
    INT 21H        
    MOV [SI], AL           ;ADD CHAR IN MATRIX ARRAY
    INC SI
    INC CURR_CHAR          ;INCREMENT CHAR POSITION ON CURRENT ROW
    INC COLUMN             ;ALSO INCREMENT THE CURRENT CHARACTER COUNT
    GOTO_POS ROW, COLUMN
    JMP MAIN_LOOP
         
    EXIT:
    MOV AH, 4CH
    INT 21H
        
    SAVE:
    MOV AH, 3CH             ;CREATING A FILE
    MOV CX, 0               ;READ-ONLY FILE
    MOV DX, OFFSET DOCNAME  ;GIVING NAME WHICH WE TOOK FROM MAIN MENU DOC NAME INPUT
    INT 21H                 
    MOV AH, 3DH             ;OPENING FILE
    MOV AL, 1               ;FOR WRITING MODE
    MOV DX, OFFSET DOCNAME  ;WHICH FILE
    INT 21H
    MOV HANDLE, AX          ;SETTING UP HANDLER
    MOV AH, 40H             ;FUNCTION FOR WRITING FILES
    MOV BX, HANDLE          ;SEARCH FOR FILE HANDLER
    MOV CX, 2000            ;HOW MANY BYTES TO WRITE IN FILE
    MOV DX, OFFSET MATRIX   ;WHAT TO WRITE
    INT 21H
    JMP MAIN_LOOP  
    
    OPEN:
    GOTO_POS 22 0    ;GO TO BOTTOM TO WRITE OPEN FILE PROMPT
    MOV DX, OFFSET OPENPROMPT
    MOV AH, 9
    INT 21H
    ;INPUT CHARS IN DOC NAME FIELD 
    MOV CX, 0  ;ARRAY SIZE COUNTER
    MOV DI, OFFSET DOCNAME
    INPUT_CHAR2: 
    MOV AH, 1
    INT 21H
    CMP AL, 13          ;CHECK IF RETURN KEY HIT
    JE RETURN2
    CMP AL, 8           ;CHECK IF BACKSPACE KEY HIT
    JE REMOVE_CHAR2
    INC CX              ;INCREMENT ARRAY SIZE BY 1
    MOV [DI], AL
    INC DI
    JMP INPUT_CHAR2
    REMOVE_CHAR2:
    CMP CX, 0
    JE SETPOS_RET2
    DEC CX              ;DECREMENT ARRAY SIZE BY 1
    DEC DI
    MOV [DI], 00H
    MOV DL, 32          ;FOR REMOVING CHAR
    MOV AH, 2           ;
    INT 21H             ;
    MOV DL, 8           ;
    MOV AH, 2           ;
    INT 21H             ;
    JMP INPUT_CHAR2
    SETPOS_RET2:
    GOTO_POS 22, 29
    JMP INPUT_CHAR2
    RETURN2:            ;CLEAR THE SCREEN AND RETURN PROCEDURE
    CLRSCRN
    CALL UPPER_BAR 
    GOTO_POS 2, 0           ;SET CURSOR POSITION BENEATH UPPER BAR
    MOV AH, 0X3D             ;TO OPEN FILES
    MOV AL, 00               ;FILE HANDLER FOR READING FILES
    MOV DX, OFFSET DOCNAME
    INT 21H
    MOV HANDLE, AX           ;SETTING UP HANDLER
    MOV AH, 0X3F             ;FUNCTION FOR READING FILES
    MOV BX, HANDLE
    MOV CX, 1760             ;HOW MANY BYTES TO WRITE
    MOV DX, OFFSET MATRIX    ;WHERE TO SAVE READ DATA
    INT 21H       
    MOV DX, OFFSET MATRIX    ;PRINT THE TEXT ON EDITOR CANVAS
    MOV AH, 9                ;
    INT 21H                  ;
    JMP MAIN_LOOP            
           
    UP:
    CMP ROW, 2
    JE MAIN_LOOP 
    DEC CURR_LINE
    DEC ROW
    GOTO_POS ROW, COLUMN
    JMP MAIN_LOOP
         
    DOWN:
    INC CURR_LINE
    INC ROW
    GOTO_POS ROW, COLUMN 
    JMP MAIN_LOOP
           
    LEFT:
    DEC COLUMN
    GOTO_POS ROW, COLUMN
    JMP MAIN_LOOP
    
    RIGHT:
    INC COLUMN
    GOTO_POS ROW, COLUMN
    JMP MAIN_LOOP
    
    ENTER:      
    NEWLINE         ;NEWLINE MACRO
    MOV [SI], 10    ;MOVE NEWLINE INTO ARRAY 
    INC SI
    MOV DL, CURR_CHAR
    MOV [DI], DL
    INC DI
    INC CURR_LINE
    MOV CURR_CHAR, 0
    INC ROW             ;INCREMENT ROW NUMBER
    MOV COLUMN, 0       ;GET HOLD OF 0TH COL FOR NAVIGATION
    GOTO_POS ROW, 0     ;TO GET ON NEWLINE 0TH COLUMN
    JMP MAIN_LOOP
    
    BACKSPACE:
    ;IF TRUE
    CMP CURR_LINE, 2    ;SEE IF CURSOR IS ON THE VERY 1ST LINE OF DOCUMENT
    ;THEN DO THIS
    JE RMV              ;IF TRUE, THEN JUST REMOVE THE CHARS FROM MATRIX
    ;IF TRUE
    CMP CURR_CHAR, 0    ;SEE IF CURSOR IS ON THE 0TH POS ON MOST LEFT
    ;THEN DO THIS
    JE GOBACKLINE       ;IF TRUE, THEN GO BACK TO UPPER ROW AT THE LATEST CHARACTER'S POS
    ;ELSE DO THIS
    REMOVE
    DEC CURR_CHAR
    DEC COLUMN
    DEC SI
    MOV [SI], 00H
    JMP MAIN_LOOP
    RMV:
    REMOVE
    DEC CURR_CHAR
    DEC COLUMN
    DEC SI              ;DECREMENT SI
    MOV [SI], 00H       ;FILL NULL IN REMOVED CHAR SPACE IN ARRAY 
    JMP MAIN_LOOP
    GOBACKLINE:
    DEC CURR_LINE
    DEC ROW
    DEC DI
    MOV DL, [DI]
    MOV COLUMN, DL
    GOTO_POS CURR_LINE, DL  ;GO TO THE LAST CHARACTER POSITION IN PREVIOUS ROW
    MOV DL, [DI]        ;MOVING IN ANOTHER REGISTER BECAUSE SIZE DOESN'T MATCH
    MOV CURR_CHAR, DL   ;TO RESET THE CURSOR TO THE LAST POSITION OF PREVIOUS LINE
    JMP MAIN_LOOP
        
MAIN ENDP
END MAIN 